// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let n = 16;
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i, bit;
        let sum = 0;
        let shiftedx = x;
        let i = 0;
        let bit = 1;
        while (i < n) {
            if ((bit & y) = bit) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
            let bit = bit + bit;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        let q = Math._divide(Math.abs(x), Math.abs(y));
        if ((x < 0) = (y < 0)) {
            return q;
        } else {
            return q*(-1);
        }
    }

    function int _divide(int x, int y) {
        var int q;
        if ((y > x) | (y < 0)) {
            return 0;
        }
        let q = Math._divide(x, y+y);
        if ((x - ((q+q)*y)) < y) {
            return q+q;
        } else {
            return q+q+1;
        }
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int y, i, pow2, comp;
        let y = 0;
        let comp = 0;
        let i = Math.divide(n, 2) - 1;
        let pow2 = Math.exp(2, i);
        while (~(i < 0)) {
            let comp = (y + pow2) * (y + pow2);
            if (((comp < x) | (comp = x)) & (comp > 0)) {
                let y = y + pow2;
            }
            let i = i - 1;
            let pow2 = pow2 - Math.divide(pow2, 2);
        }
        return y;
    }

    function int exp(int x, int y) {
        var int i;
        let i = 1;
        while (y > 0) {
            let i = i * x;
            let y = y - 1;
        }
        return i;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if (b > a) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }
}
