// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16(a=instruction, b=aluoutput, sel=instruction[15], out=muxout1);
    And(a=instruction[15], b=instruction[5], out=andout1);
    Not(in=instruction[15], out=notout1);
    Or(a=notout1, b=andout1, out=orout1);
    ARegister(in=muxout1, load=orout1, out=aregout, out[0..14]=addressM);
    And(a=instruction[4], b=instruction[15], out=loaddreg);
    DRegister(in=aluoutput, load=loaddreg, out=dregout);
    Mux16(a=aregout, b=inM, sel=instruction[12], out=muxout2);
    ALU(x=dregout, y=muxout2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluoutput, out=outM, zr=zr, ng=ng);
    And(a=instruction[3], b=instruction[15], out=writeM);

    // checking condition for jump
    And(a=zr, b=instruction[1], out=and100);
    And(a=ng, b=instruction[2], out=and110);
    Or(a=zr, b=ng, out=and120);
    Not(in=and120, out=positive);
    And(a=positive, b=instruction[0], out=and130);
    And(a=instruction[0], b=instruction[1], out=and140);
    And(a=instruction[2], b=and140, out=and150);
    Or(a=and100, b=and110, out=aaa);
    Or(a=aaa, b=and130, out=bbb);
    Or(a=bbb, b=and150, out=ccc);
    And(a=ccc, b=instruction[15], out=andout2);
    //

    Or(a=andout2, b=reset, out=orout4);
    Not(in=orout4, out=notout2);
    PC(in=aregout, load=andout2, inc=notout2, reset=reset, out[0..14]=pc);
}
