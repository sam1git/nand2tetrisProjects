function Screen.init 2
push constant 16
call Array.new 1
pop static 1
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
pop static 0
push constant 0
return
function Screen.clearScreen 1
push constant 16384
pop local 0
label WHILE_EXP0
push local 0
push constant 24576
lt
not
if-goto WHILE_END0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push argument 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 0
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 1
push local 1
push local 0
call Screen._newWord 2
pop local 2
push local 0
push local 2
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen._newWord 1
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push constant 15
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push static 1
add
pop pointer 1
push that 0
neg
pop local 0
goto IF_END1
label IF_FALSE1
push argument 0
push static 1
add
pop pointer 1
push that 0
pop local 0
label IF_END1
push argument 1
call Memory.peek 1
push local 0
or
return
goto IF_END0
label IF_FALSE0
push argument 0
push constant 15
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
push static 1
add
pop pointer 1
push that 0
push constant 1
sub
pop local 0
goto IF_END2
label IF_FALSE2
push argument 0
push static 1
add
pop pointer 1
push that 0
neg
push constant 1
sub
pop local 0
label IF_END2
push argument 1
call Memory.peek 1
push local 0
and
return
label IF_END0
function Screen.drawLine 7
push argument 1
push argument 3
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
push argument 2
call Screen._hLine 3
pop temp 0
goto IF_END0
label IF_FALSE0
push argument 0
push argument 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 1
push argument 3
call Screen._vLine 3
pop temp 0
goto IF_END1
label IF_FALSE1
push argument 2
push argument 0
call Math.max 2
push argument 2
push argument 0
call Math.min 2
sub
pop local 0
push argument 3
push argument 1
call Math.max 2
push argument 3
push argument 1
call Math.min 2
sub
pop local 1
push argument 3
push argument 1
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
pop local 3
goto IF_END2
label IF_FALSE2
push constant 1
neg
pop local 3
label IF_END2
push argument 2
push argument 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
pop local 2
goto IF_END3
label IF_FALSE3
push constant 1
neg
pop local 2
label IF_END3
push constant 0
pop local 4
push constant 0
pop local 5
push constant 0
pop local 6
label WHILE_EXP0
push local 4
push local 0
push constant 1
add
lt
push local 5
push local 1
push constant 1
add
lt
and
not
if-goto WHILE_END0
push argument 0
push local 4
push local 2
call Math.multiply 2
add
push argument 1
push local 5
push local 3
call Math.multiply 2
add
call Screen.drawPixel 2
pop temp 0
push local 6
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 4
push constant 1
add
pop local 4
push local 6
push local 1
add
pop local 6
goto IF_END4
label IF_FALSE4
push local 5
push constant 1
add
pop local 5
push local 6
push local 0
sub
pop local 6
label IF_END4
goto WHILE_EXP0
label WHILE_END0
label IF_END1
label IF_END0
push constant 0
return
function Screen._hLine 7
push argument 0
push argument 2
call Math.min 2
pop local 1
push argument 0
push argument 2
call Math.max 2
pop local 2
push argument 1
push constant 32
call Math.multiply 2
push local 1
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 6
push argument 1
push constant 32
call Math.multiply 2
push local 2
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 5
push local 1
pop local 0
push local 6
push local 5
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
label WHILE_EXP0
push local 0
push local 2
lt
not
if-goto WHILE_END0
push local 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 2
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE0
push local 0
push local 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 3
push local 3
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push constant 32
call Math.multiply 2
push local 0
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 4
push local 4
call Screen._fillword 1
pop temp 0
goto IF_END1
label IF_FALSE1
label WHILE_EXP1
push local 3
push constant 0
eq
not
not
if-goto WHILE_END1
push local 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
push local 0
push local 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 3
goto WHILE_EXP1
label WHILE_END1
label IF_END1
push local 2
pop local 0
push local 0
push local 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 3
push local 3
push constant 15
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push constant 32
call Math.multiply 2
push local 0
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 4
push local 4
call Screen._fillword 1
pop temp 0
goto IF_END2
label IF_FALSE2
label WHILE_EXP2
push local 3
push constant 0
eq
not
not
if-goto WHILE_END2
push local 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
sub
pop local 0
push local 0
push local 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 3
goto WHILE_EXP2
label WHILE_END2
push local 0
push argument 1
call Screen.drawPixel 2
pop temp 0
label IF_END2
push argument 1
push constant 32
call Math.multiply 2
push local 1
push constant 16
call Math.divide 2
add
push constant 16384
add
push constant 1
add
pop local 4
push argument 1
push constant 32
call Math.multiply 2
push local 2
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 5
label WHILE_EXP3
push local 4
push local 5
lt
not
if-goto WHILE_END3
push local 4
call Screen._fillword 1
pop temp 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
function Screen._fillword 0
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push constant 1
neg
call Memory.poke 2
pop temp 0
goto IF_END0
label IF_FALSE0
push argument 0
push constant 0
call Memory.poke 2
pop temp 0
label IF_END0
push constant 0
return
function Screen._vLine 5
push argument 1
push argument 2
call Math.min 2
pop local 0
push argument 1
push argument 2
call Math.max 2
pop local 1
push local 0
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 3
push local 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
push constant 16384
add
push constant 1
add
pop local 4
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 2
label WHILE_EXP0
push local 3
push local 4
lt
not
if-goto WHILE_END0
push local 3
push local 2
push local 3
call Screen._newWord 2
call Memory.poke 2
pop temp 0
push local 3
push constant 32
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 0
push argument 3
push constant 1
add
pop argument 3
label WHILE_EXP0
push argument 1
push argument 3
lt
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 2
call Screen._hLine 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 2
push constant 182
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
neg
pop local 0
push argument 2
push constant 1
add
pop local 1
push argument 2
push argument 2
call Math.multiply 2
pop local 2
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push argument 0
push local 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
sub
push argument 1
push local 0
add
push argument 0
push local 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
add
call Screen._hLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
label IF_FALSE0
push constant 0
return
